$include('drawLine1d_module.si')
/////////////////////////////////////////////////////////////////////////////////
algorithm draw_circle_fill(  // signed coordinate width
  input   uint1  start,  // start line drawing_2
  input   uint1  oe_2,     // output enable
  input   int16  x0,     // centre point x_2
  input   int16  y0,     // centre point y
  input   int16  r0,     // radius
  output! int16  x_2,      // drawing_2 position
  output! int16  y,      // drawing_2 position
  output! uint1  drawing_2, // actively drawing_2
  output! uint1  busy,   // drawing_2 request in progress
  output! uint1  done_org     // drawing_2 is complete (high for one tick)
) <autorun> {

    int16  xa= uninitialized;  // // x_2 position relative to circle centre point
    int16  ya= uninitialized; // //  y position relative to circle centre point
    int18 err= 0;   // error values (4x as wide as coords)
    int18 err_tmp= 0;  // error values (4x as wide as coords)

    int16 lx0= uninitialized;
    int16 lx1= uninitialized;
    int1 line_start= uninitialized;  // start drawing_2 line
    int1 line_done= uninitialized;   // finished drawing_2 current line?

      draw_line_1d_module line_drawing  (
         start <: line_start,
         oe    <: oe_2, 
         x0    <: lx0,
         x1    <: lx1,
         x     :> x_2,
         drawing :> drawing_2 , 
         //busy <:, // Empty Connections in sv
         done_org    :> line_done
         );
    
    while (1) {
     if (reset) 
     {
        busy = 0;
        done_org = 0;
        goto IDLE;
     }

     IDLE: 
        done_org = 0;
        if (start)
        {
            busy = 1;
            xa = -r0;
            ya = 0;
            err = 2 - (2 * r0);
            goto CORDS_DOWN;

        }
        else {goto IDLE;}
     CORDS_DOWN:
        y   = y0 + ya;  // horizontal line (common y-value)
        lx0 = x0 + xa;  // draw left-to-right
        lx1 = x0 - xa;
        line_start = 1;
        goto LINE_DOWN;
    
     LINE_DOWN:
        line_start = 0;
        if (line_done) {goto CORDS_UP;}
        else {goto LINE_DOWN;}

     CORDS_UP:
        y = y0 - ya;  // lx0 and lx1 are the same as CORDS_DOWN
        line_start = 1;
        goto LINE_UP;

     LINE_UP:
        line_start = 0;
        if (line_done) {goto CALC_Y;}
        else {goto LINE_UP;}

     CALC_Y: 
        if (xa == 0) {
            busy = 0;
            done_org = 1;
            goto IDLE;
         }
        else {
            err_tmp = err;  // save existing error for next step
            /* verilator lint_off WIDTH */
            if (err <= ya) {
                ya = ya + 1;
                err = err + 2 * (ya + 1) + 1;
            }
            /* verilator lint_on WIDTH */
            goto CALC_X;
        }
     CALC_X:
        /* verilator lint_off WIDTH */
        if (err_tmp > xa || err > ya) {
            xa = xa + 1;
            err = err + 2 * (xa + 1) + 1;
        }
        /* verilator lint_on WIDTH */
        goto CORDS_DOWN;

    }
}






