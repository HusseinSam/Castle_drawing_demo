$include('filltriangle_module.si')
$include('draw_rectangle_fill.si')
$include('fillCircle_module.si')
//CORDW=16 , CIDXW=4 , SCALE=1 
algorithm draw_render(  // signed coordinate width
  input   uint1  start,  // start line 
  input   uint1  oe_render,     // output enable
  output! int16  x,       // horizontal draw position
  output! int16  y,       // vertical draw position
  output! uint4  cidx,      // pixel colour
  output! uint1  drawing_2, // actively drawing_2
  output! uint1  done_org     // drawing_2 is complete (high for one tick)
) <autorun> {
    // Shape identifiers
    uint4 RBOW_CNT = 8;    // number of shapes in rainbow
    uint5 SHAPE_CNT = 19;  // number of shapes in castle
    uint4 rbow_id = 0;     // rainbow shape identifier
    uint5 shape_id = 0;    // castle shape identifier
    // Shape coordinates
    int16 vx0 = 0;
    int16 vy0 = 0;
    int16 vx1 = 0;
    int16 vy1 = 0;
    int16 vx2 = 0;
    int16 vy2 = 0;
    int16 vr0 = 0;    // circle radius
    // Drawing coordinates
    int16 x_tri = 0;
    int16 y_tri = 0;
    int16 x_rect = 0;
    int16 y_rect = 0;
    int16 x_circle = 0;
    int16 y_circle = 0;
    // Control signals
    uint1 draw_done = 0;
    uint1 draw_start_tri = 0;
    uint1 drawing_tri = 0;
    uint1 draw_done_tri = 0;
    uint1 draw_start_rect = 0;
    uint1 drawing_rect = 0;
    uint1 draw_done_rect = 0;
    uint1 draw_start_circle = 0;
    uint1 drawing_circle = 0;
    uint1 draw_done_circle = 0;
    // Module instantiations with proper binding operators
    draw_triangle_fill draw_triangle_inst (
        start <: draw_start_tri,
        oe <: oe_render,
        x0 <: vx0,
        y0 <: vy0,
        x1 <: vx1,
        y1 <: vy1,
        x2 <: vx2,
        y2 <: vy2,
        x_org :> x_tri,
        y :> y_tri,
        drawing_2 :> drawing_tri,
       // busy <: ,
        done_org :> draw_done_tri
    );
    draw_rectangle_fill draw_rectangle_inst (
        start <: draw_start_rect,
        oe_2 <: oe_render,
        x0 <: vx0,
        y0 <: vy0,
        x1 <: vx1,
        y1 <: vy1,
        x :> x_rect,
        y :> y_rect,
        drawing_2 :> drawing_rect,
       // busy <: ,
        done_org :> draw_done_rect
    );
    draw_circle_fill draw_circle_inst (
        start <: draw_start_circle,
        oe <: oe_render,
        x0 <: vx0,
        y0 <: vy0,
        r0 <: vr0,
        x_2 :> x_circle,
        y :> y_circle,
        drawing_2 :> drawing_circle,
       // busy <: ,
        done_org :> draw_done_circle
    );

    while(1)   // each loop iteration is one clock sycle
    {   
        if (reset) 
        {
            //busy = 0;?
            //done_org = 0;?
            goto IDLE;
        }
    IDLE:
        if (start){
            goto INIT_RBOW;
        }
        else {goto IDLE;}
    INIT_RBOW:
        draw_start_circle = 1;
        vx0 = 368;
        vy0 = 160;
        vr0 = 180 - 5 * rbow_id;
        /* verilator lint_off WIDTH */
        cidx = (rbow_id == RBOW_CNT-1) ? 0 : 2 + rbow_id;
        /* verilator lint_on WIDTH */
        goto DRAW_RBOW;    
    DRAW_RBOW: 
        draw_start_circle = 0;
        if (draw_done)
        { 
            /* verilator lint_off WIDTH */
            if (rbow_id == RBOW_CNT-1) { goto INIT_CASTLE; }
            /* verilator lint_on WIDTH */
            else{
                rbow_id = rbow_id + 1;
                goto INIT_CASTLE;
            }
        }
        else {goto DRAW_RBOW;}  
    INIT_CASTLE:
        //state <= DRAW_CASTLE;
        switch( shape_id ) {
            case 0 : {  draw_start_rect = 1;
                        vx0 =  60; vy0 =  75;
                        vx1 = 190; vy1 = 130;
                        cidx = 14;  } // dark grey  
            case 1 : {  draw_start_rect = 1;
                        vx0 = 110; vy0 = 110;
                        vx1 = 140; vy1 = 130;
                        cidx = 15;  } // blue-grey    
            case 2 : {  draw_start_circle = 1;
                        vx0 = 125; vy0 = 110;
                        vr0 =  15;
                        cidx = 15;  } // blue-grey    
            case 3 : {   draw_start_rect = 1;
                        vx0 =  40; vy0 =  50;
                        vx1 =  60; vy1 = 130;
                        cidx = 14;  } // dark grey    
            case 4 : {  draw_start_rect = 1;
                        vx0 = 110; vy0 =  45;
                        vx1 = 140; vy1 =  75;
                        cidx = 14;  } // dark grey    
            case 5 : {  draw_start_rect = 1;
                        vx0 = 190; vy0 =  50;
                        vx1 = 210; vy1 = 130;
                        cidx = 14;  } // dark grey    
            case 6 : {  draw_start_tri = 1;
                        vx0 =  50; vy0 =  35;
                        vx1 =  65; vy1 =  50;
                        vx2 =  35; vy2 =  50;
                        cidx = 2;  } // red    
            case 7 : {  draw_start_tri = 1;
                        vx0 = 125; vy0 =  25;
                        vx1 = 145; vy1 =  45;
                        vx2 = 105; vy2 =  45;
                        cidx = 2;  } // red    
            case 8 : {  draw_start_tri = 1;
                        vx0 = 200; vy0 =  35;
                        vx1 = 215; vy1 =  50;
                        vx2 = 185; vy2 =  50;
                        cidx = 2;  } // red    
            case 9 : {  draw_start_rect = 1;
                        vx0 =  46; vy0 =  55;
                        vx1 =  54; vy1 =  70;
                        cidx = 15;  } // blue-grey    
            case 10 : { draw_start_rect = 1;
                        vx0 = 120; vy0 =  50;
                        vx1 = 130; vy1 =  70;
                        cidx = 15;  } // blue-grey    
            case 11 : {  draw_start_rect = 1;
                        vx0 = 196; vy0 =  55;
                        vx1 = 204; vy1 =  70;
                        cidx = 15;  } // blue-grey    
            case 12 : {   draw_start_rect = 1;
                        vx0 =  63; vy0 =  67;
                        vx1 =  72; vy1 =  75;
                        cidx = 14;  } // dark grey    
            case 13 : {  draw_start_rect = 1;
                        vx0 =   80; vy0 =  67;
                        vx1 =   89; vy1 =  75;
                        cidx = 14;  } // dark grey    
            case 14 : {  draw_start_rect = 1;
                        vx0 =  97; vy0 =  67;
                        vx1 = 106; vy1 =  75;
                        cidx = 14;  } // dark grey    
            case 15 : {   draw_start_rect = 1;
                        vx0 = 144; vy0 =  67;
                        vx1 = 153; vy1 =  75;
                        cidx = 14;  } // dark grey    
            case 16 : {  draw_start_rect = 1;
                        vx0 = 161; vy0 =  67;
                        vx1 = 170; vy1 =  75;
                        cidx = 14;  } // dark grey    
            case 17 : {   draw_start_rect = 1;
                        vx0 = 178; vy0 =  67;
                        vx1 = 187; vy1 =  75;
                        cidx = 14;  } // dark grey    
            default : {  draw_start_rect = 1;
                        vx0 =   0; vy0 = 131;
                        vx1 = 319; vy1 = 179;
                        cidx = 0;  } // background (transparent) 
        }
        goto DRAW_CASTLE;      
    DRAW_CASTLE:
        draw_start_tri    = 0;
        draw_start_rect   = 0;
        draw_start_circle = 0;
        if (draw_done)
        {
            if (shape_id == SHAPE_CNT-1) {goto DONE;}
            else{
                shape_id = shape_id + 1;
                goto INIT_CASTLE;
            }
        }
        else{goto DRAW_CASTLE;}
    DONE:
        goto DONE;
    }
}

