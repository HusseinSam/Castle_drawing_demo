$include('bram_sdp.si')
algorithm linebuffer_simple(  
    input   uint1 logic clk_sys,   // input clock
    input   uint1 clk_pix,   // output clock
    input   uint1 line,      // line start (clk_pix)
    input   uint1 line_sys,  // line start (clk_sys)
    input   uint1 en_in,     // enable input (clk_sys)
    input   uint1 en_out,    // enable output (clk_pix)
    input   uint6 scale,   // scale factor (>=1)
    input   uint4 data_in,  // data in (clk_sys)
    output! uint4 data_out  // data out (clk_pix)
) <autorun> {
  
  //parameter DATAW=4,  // data width of each channel
  //parameter LEN=640,  // length of line
  //parameter SCALEW=6  // scale width (max scale == 2^SCALEW-1)

    uint$clog2(LEN)-1$ addr_out;  // output address (pixel counter)
    uint6 cnt_h;  // horizontal scale counter
    uint$clog2(LEN)-1$ addr_in;
    uint1 we;

    bram_sdp /*#(.WIDTH(DATAW) = 4 ,.DEPTH(LEN) = 640)*/ bram_lb (
        //.clk_write(clk_sys),
        //.clk_read(clk_pix),
        we         <: we,  // not connected
        addr_write <: addr_in,
        addr_read  <: addr_out,
        data_in    <: data_in,
        data_out   <: data_out
    );
    
    while(1)
    {
        //always_ff @(posedge clk_pix) begin  - output data
        if (en_out) {
            if (cnt_h == scale-1) {
                cnt_h = 0;
                if (addr_out != LEN-1) addr_out = addr_out + 1;
            } 
            else {cnt_h = cnt_h + 1};
        }
        if (line) {
            addr_out = 0;
            cnt_h = 0;
        }

        // read data in
        if (en_in) {we = 1;}
        if (addr_in == LEN-1) {we = 0;}
        if (we) {addr_in = addr_in + 1;}
        if (line_sys) {
            we = 0;
            addr_in = 0;
        }
    }

}
    
    
    
      
    

    
    

   

